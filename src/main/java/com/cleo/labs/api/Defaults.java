package com.cleo.labs.api;

import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.UUID;

import com.cleo.labs.api.constant.HostType;

public class Defaults {
    // these are all .toLowerCase for case insensitive lookup
    private static final Set<String> ignore = new HashSet<String>(Arrays.asList(new String[] {
        ".alias",
        ".application",
        ".by",
        ".class",
        ".created",
        ".enabled",
        ".enc",
        ".local",
        ".localhostclass",
        ".modevent",
        ".modified",
        ".moditem",
        ".modtype",
        ".oldmoditem",
        ".preconfigured",
        ".ready",
        ".serial",
        ".transport",
        ".type",
        ".uid",
        ".version",
        "licensed",
        "origin",
        "passworddate"
        }));
    private static final Map<String,String> manualhostdefaults = new HashMap<String,String>();
    static {
        manualhostdefaults.put("Advanced.ClientType",                  "");
        manualhostdefaults.put("Advanced.HighPriority",                "");
        manualhostdefaults.put("Advanced.PreferredPublicKeyAlgorithm", "");
        manualhostdefaults.put(".standaloneaction",                    "False");
    }
    private static final Map<String,String> manualmailboxdefaults = new HashMap<String,String>();
    static {
        manualmailboxdefaults.put("Advanced.ClientType",              "");
        manualmailboxdefaults.put("Advanced.HighPriority",            "");
        manualmailboxdefaults.put("Advanced.PGPCompressionAlgorithm", "System Default");
        manualmailboxdefaults.put("Advanced.PGPEncryptionAlgorithm",  "System Default");
        manualmailboxdefaults.put("Advanced.PGPHashAlgorithm",        "System Default");
        manualmailboxdefaults.put("Usesamecerts",                     "True");
        manualmailboxdefaults.put("Zipportaluploads",                 "False");
        manualmailboxdefaults.put(".usercert",                        "");
        manualmailboxdefaults.put(".usercertpassword",                "");
        manualmailboxdefaults.put(".cacert",                          "");
    }

    /*
    private static final Map<HostType,Class> hostclass = new HashMap<HostType,Class>();
    private static final Map<HostType,Class> mailboxclass = new HashMap<HostType,Class>();
    static {
        hostclass.put(AS2, com.cleo.lexicom.beans.as2bean.AS2Host.class);
        / com.cleo.lexicom.beans.as2bean.AS2Mailbox
    }
    */

    private static final Map<HostType,Map<String,String>> hostmap = new HashMap<HostType,Map<String,String>>();
    private static final Map<HostType,Map<String,String>> mailboxmap = new HashMap<HostType,Map<String,String>>();
    static {
        Map<String,String> map;
        // *** from here
 // AS2: com.cleo.lexicom.beans.as2bean.AS2Host / com.cleo.lexicom.beans.as2bean.AS2Mailbox
        map = new TreeMap<String,String>();
        map.put(".cemcapable", "False");
        map.put(".secure", "False");
        map.put(".servercertfile", "");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Addcontenttypetoinbox", "False");
        map.put("Advanced.AutoAcceptReceivedCertificate(CEM)", "");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.RSA-OAEPKeyAlgorithmParameter", "MGF1-SHA1");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Contenttypedirs[Binary]", "binary");
        map.put("Contenttypedirs[EDI Consent]", "");
        map.put("Contenttypedirs[EDIFACT]", "");
        map.put("Contenttypedirs[Other]", "other");
        map.put("Contenttypedirs[Plain Text]", "plain");
        map.put("Contenttypedirs[X12]", "");
        map.put("Contenttypedirs[XML]", "xml");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Generatefilenameresponses", "False");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Messageversion", "1.1");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Overwrite", "False");
        map.put("Port", "0");
        map.put("Responseaction", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Serviceoverride", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST /as2\nAS2-From=,AS2-To=,Subject=,[Content-Type=|EDIFACT|X12|XML|Binary|Plain Text|EDI Consent|]");
        map.put("Uidswpd", "True");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.AS2, map);
        map = new TreeMap<String,String>();
        map.put(".folder", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencrpending", "False");
        map.put(".localencrreadonly", "False");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerreadonly", "False");
        map.put(".partnerservercertfile", "");
        map.put(".servercertfile", "");
        map.put(".serversigncertfile", "");
        map.put("Asyncdeliverymethod", "2");
        map.put("Authtype", "0");
        map.put("Compressedrequest", "False");
        map.put("Deliverytype", "0");
        map.put("Emailmdn", "False");
        map.put("Encryptedrequest", "False");
        map.put("Encryptionmethod", "4");
        map.put("Forceencryption", "False");
        map.put("Forcemdnsignature", "False");
        map.put("Forcesignature", "False");
        map.put("Keyencryptionalgorithm", "0");
        map.put("Localreadonly", "False");
        map.put("Localsignpending", "False");
        map.put("Mictype", "0");
        map.put("Overridelistenercerts", "False");
        map.put("Receiptdesired", "False");
        map.put("Signaturealgorithm", "0");
        map.put("Signedreceipt", "False");
        map.put("Signedrequest", "False");
        map.put("Useencrcert", "False");
        map.put("Usesamecerts", "False");
        map.put("Usesigncert", "False");
        mailboxmap.put(HostType.AS2, map);
// AS3: com.cleo.lexicom.beans.as2bean.AS3Host / com.cleo.lexicom.beans.as2bean.AS3Mailbox
        map = new TreeMap<String,String>();
        map.put(".securitymode", "None");
        map.put(".servercertfile", "");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Activedataporthigh", "0");
        map.put("Activedataportlow", "0");
        map.put("Addcontenttypetoinbox", "False");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.DeleteZeroLengthFiles", "False");
        map.put("Advanced.ExplicitSSLCommand", "AUTH TLS");
        map.put("Advanced.FileListParseMethod", "");
        map.put("Advanced.HighPriority", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.SSLMaximumProtocolVersion", "");
        map.put("Advanced.SSLMinimumProtocolVersion", "SSL 3.0");
        map.put("Advanced.UseNLST", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Contenttypedirs[Binary]", "binary");
        map.put("Contenttypedirs[EDI Consent]", "");
        map.put("Contenttypedirs[EDIFACT]", "");
        map.put("Contenttypedirs[Other]", "other");
        map.put("Contenttypedirs[Plain Text]", "plain");
        map.put("Contenttypedirs[X12]", "");
        map.put("Contenttypedirs[XML]", "xml");
        map.put("Datachannelmode", "Passive");
        map.put("Datatype", "Binary");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Messageversion", "1.1");
        map.put("Notes", "This is a template of the host that was used by the Cleo VersaLex client product for the Cleo VersaLex AS3 server product during Drummond AS3 interoperability certification testing and uses the prescribed settings that were specified by that server at that time.  Note that settings have been left as generic as possible for this host and your settings may be slightly different based on the particular agreements with your trading partner. \n\nAt the host level enter your trading partner's FTP server address on the \"General\" tab.  The default Security Mode setting is \"None\".  If a secure connection will be required, choose the \"SSL Auth\" setting as the Security Mode on the \"FTP\" tab.  The appropriate \"Explicit SSL Command\" is already preset for this host in the Advanced tab.\n\nRefer to the notes at the Mailbox and Action level for additional setting requirements and information.");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Overwrite", "False");
        map.put("Passivedataporthigh", "0");
        map.put("Passivedataportlow", "0");
        map.put("Port", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Serverallowsdelete", "True");
        map.put("Serverrequirespbszfortls", "True");
        map.put("Serverrequiresprotpfortls", "True");
        map.put("Serverrequirestempdirectory", "False");
        map.put("Serverrequiresuniquefilenames", "False");
        map.put("Substitutepassiveipaddress", "True");
        map.put("Uidswpd", "True");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.AS3, map);
        map = new TreeMap<String,String>();
        map.put(".clientcertalias", "");
        map.put(".clientcertpassword", "");
        map.put(".folder", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencrpending", "False");
        map.put(".localencrreadonly", "False");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerreadonly", "False");
        map.put(".partnerservercertfile", "");
        map.put(".servercertfile", "");
        map.put(".serversigncertfile", "");
        map.put("Asyncdeliverymethod", "4");
        map.put("Compressedrequest", "False");
        map.put("Contenttype", "-1");
        map.put("Deliverytype", "1");
        map.put("Emailmdn", "False");
        map.put("Encryptedrequest", "True");
        map.put("Encryptionmethod", "4");
        map.put("Forceencryption", "False");
        map.put("Forcemdnsignature", "False");
        map.put("Forcesignature", "False");
        map.put("Keyencryptionalgorithm", "0");
        map.put("Localreadonly", "False");
        map.put("Localsignpending", "False");
        map.put("Mictype", "0");
        map.put("Nopasswordrequired", "False");
        map.put("Notes", "On the \"AS3\" tab, signing and encryption and a \"SHA-1\" MIC Algorithm have been applied by default.  Consult your trading partner for details regarding the required type of security and the type of MIC Algorithm that will be used and adjust as needed.\n\nOn the \"Certificates\" tab, enter the encryption certificate (and optionally the signing certificate) that you exchanged with your trading partner.  If you wish to use certificate(s) other than those defined in the Local Listener, you may choose to override the Local Listener Certificate(s) and enter new certificate aliases.  Be sure to exchange the certificate(s) that you will be using for this trading relationship with your trading partner.\n\nOn the \"FTP\" tab, enter the username and password for your trading partner's FTP server as well as your agreed-upon AS3 names.  Change the \"Subject\" and \"Content-Type\" field as needed. \n\nOn the \"Security\" tab, enter the optional client certificate alias and password if it is required by your trading relationship.");
        map.put("Notreadyreason", "Username required.");
        map.put("Overridelistenercerts", "False");
        map.put("Partneroverridelistenercert", "True");
        map.put("Receiptdesired", "True");
        map.put("Signaturealgorithm", "0");
        map.put("Signedreceipt", "True");
        map.put("Signedrequest", "True");
        map.put("Subject", "AS3 Message");
        map.put("Useencrcert", "False");
        map.put("Usesamecerts", "False");
        map.put("Usesigncert", "False");
        mailboxmap.put(HostType.AS3, map);
// EBMS: com.cleo.lexicom.beans.ebxmlbean.EBXMLHost / com.cleo.lexicom.beans.ebxmlbean.EBXMLMailbox
        map = new TreeMap<String,String>();
        map.put(".id", "*Rw**");
        map.put(".secure", "False");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Addcontenttypetoinbox", "False");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.Encryption-SigningOrder", "Sign then encrypt");
        map.put("Advanced.EncryptionAlgorithm", "TripleDES");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.ProfileSupport", "");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Contenttypedirs[Binary]", "binary");
        map.put("Contenttypedirs[EDI-Consent]", "");
        map.put("Contenttypedirs[EDIFACT]", "");
        map.put("Contenttypedirs[Other]", "other");
        map.put("Contenttypedirs[Plain Text]", "plain");
        map.put("Contenttypedirs[X12]", "");
        map.put("Contenttypedirs[XML]", "xml");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Overridelistenerfrompartyid", "False");
        map.put("Port", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Storerawsent", "False");
        map.put("Syntax[PUT]", "POST /ebMS\nSOAPAction=\"ebXML\",[Content-Type=|EDIFACT|X12|XML|Binary|Plain Text|EDI-Consent|]");
        map.put("Uidswpd", "True");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.EBMS, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Ackdesired", "False");
        map.put("Authtype", "0");
        map.put("Compressedrequest", "False");
        map.put("Eliminateduplicates", "True");
        map.put("Emailack", "False");
        map.put("Encryptedrequest", "False");
        map.put("Forceencryption", "False");
        map.put("Forcesignature", "False");
        map.put("Honorreplyrequests", "Any");
        map.put("Overridelistenercerts", "False");
        map.put("Overridelistenerfromroleserviceaction", "False");
        map.put("Preservemessageorder", "False");
        map.put("Signedack", "False");
        map.put("Signedrequest", "False");
        map.put("Synchronousreply", "True");
        map.put("Synchronousreplyackonly", "True");
        map.put("Usepartnersamecerts", "False");
        mailboxmap.put(HostType.EBMS, map);
// FTP: com.cleo.lexicom.beans.ftpbean.FtpHost / com.cleo.lexicom.beans.ftpbean.FtpMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Activedataporthigh", "0");
        map.put("Activedataportlow", "0");
        map.put("Advanced.DeleteZeroLengthFiles", "False");
        map.put("Advanced.FileListParseMethod", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.UseNLST", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Datachannelmode", "Passive");
        map.put("Datatype", "ASCII");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Passivedataporthigh", "0");
        map.put("Passivedataportlow", "0");
        map.put("Port", "21");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Substitutepassiveipaddress", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.FTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Nopasswordrequired", "False");
        map.put("Notreadyreason", "Username required.");
        map.put("Partneroverridelistenercert", "True");
        mailboxmap.put(HostType.FTP, map);
// FTPS: com.cleo.lexicom.beans.ftpbean.secure.FtpsHost / com.cleo.lexicom.beans.ftpbean.secure.FtpsMailbox
        map = new TreeMap<String,String>();
        map.put(".securitymode", "SSL AUTH");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Activedataporthigh", "0");
        map.put("Activedataportlow", "0");
        map.put("Advanced.DeleteZeroLengthFiles", "True");
        map.put("Advanced.ExplicitSSLCommand", "AUTH TLS");
        map.put("Advanced.ExplicitSSLPostCommand", "PBSZ 0;PROT P");
        map.put("Advanced.FileListParseMethod", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.SSLMaximumProtocolVersion", "");
        map.put("Advanced.SSLMinimumProtocolVersion", "SSL 3.0");
        map.put("Advanced.UseNLST", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Datachannelmode", "Passive");
        map.put("Datatype", "ASCII");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Passivedataporthigh", "0");
        map.put("Passivedataportlow", "0");
        map.put("Port", "990");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Substitutepassiveipaddress", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.FTPS, map);
        map = new TreeMap<String,String>();
        map.put(".clientcertalias", "");
        map.put(".clientcertpassword", "");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put("Nopasswordrequired", "False");
        map.put("Notreadyreason", "Username required.");
        map.put("Partneroverridelistenercert", "True");
        mailboxmap.put(HostType.FTPS, map);
// HTTP: com.cleo.lexicom.beans.httpbean.HttpHost / com.cleo.lexicom.beans.httpbean.HttpMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.ServerType", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "80");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST \nContent-type=|application/x-www-form-urlencoded|multipart/form-data|application/octet-stream|");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.HTTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Header[PUT]", "Content-type=application/x-www-form-urlencoded");
        mailboxmap.put(HostType.HTTP, map);
// HTTPS: com.cleo.lexicom.beans.httpbean.secure.HttpsHost / com.cleo.lexicom.beans.httpbean.secure.HttpsMailbox
        map = new TreeMap<String,String>();
        map.put(".secure", "False");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.ServerType", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "443");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST \nContent-type=|application/x-www-form-urlencoded|multipart/form-data|application/octet-stream|");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.HTTPS, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Header[PUT]", "Content-type=multipart/form-data");
        mailboxmap.put(HostType.HTTPS, map);
// MQ: com.cleo.lexicom.beans.mqbean.MQHost / com.cleo.lexicom.beans.mqbean.MQMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.QueueAccessOnGet", "Exclusive");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Port", "1414");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Uidswpd", "True");
        map.put("Usedefaultqmanager", "False");
        hostmap.put(HostType.MQ, map);
        map = new TreeMap<String,String>();
        map.put(".enablereceivesecurity", "False");
        map.put(".enablesendsecurity", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".receiveauthclient", "False");
        map.put(".sendauthclient", "False");
        map.put(".usesamesecurity", "True");
        map.put("Forceuppercase", "False");
        map.put("Msgpriority", "0");
        map.put("Notreadyreason", "Sender Queue is required.");
        map.put("Sendciphersuite", "SSL_RSA_WITH_3DES_EDE_CBC_SHA");
        map.put("Usereceiverqueue", "True");
        map.put("Usereplytoqueue", "False");
        map.put("Usesamechannel", "True");
        mailboxmap.put(HostType.MQ, map);
// OFTP: com.cleo.lexicom.beans.oftpbean.OFTPHost / com.cleo.lexicom.beans.oftpbean.OFTPMailbox
        map = new TreeMap<String,String>();
        map.put(".securetcpip", "False");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Acecapable", "False");
        map.put("Advanced.DowngradeOFTPVersion", "");
        map.put("Advanced.EBCDICEncoding", "Cp500 EBCDIC International");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Allowrestart", "True");
        map.put("Buffercredits", "3");
        map.put("Buffersize", "128");
        map.put("Checkservername", "False");
        map.put("Compress", "False");
        map.put("Connecttype", "4");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "At least one ISDN Address is required.");
        map.put("Port", "-1");
        map.put("Recordsize", "128");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Tcpip", "True");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.OFTP, map);
        map = new TreeMap<String,String>();
        map.put(".authenticationcertalias", "ENCRYPT105");
        map.put(".authenticationmyuseencryptioncert", "True");
        map.put(".authenticationpartneruseencryptioncert", "True");
        map.put(".authpartnercertfile", "");
        map.put(".eerpcertalias", "SIGN105");
        map.put(".eerpmyusesigningcert", "True");
        map.put(".eerppartnersignfile", "");
        map.put(".eerppartnerusesigningcert", "True");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "ENCRYPT105");
        map.put(".localencrcertpassword", "vlenc:73367ce4-ea5e-498e-9463-f1c8294a0eea:99e7a66d38a89df8da5325174509c0e6");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "SIGN105");
        map.put(".localsigncertpassword", "vlenc:73367ce4-ea5e-498e-9463-f1c8294a0eea:f573de204338fab9f13fc815efa64f14");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".submailbox", "False");
        map.put(".tlscertalias", "");
        map.put(".tlscertpassword", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Allowlistenersendaction", "False");
        map.put("Authenticationcertpassword", "vlenc:73367ce4-ea5e-498e-9463-f1c8294a0eea:043eb4239daaadf4a971c5cd3690dcc1");
        map.put("Ciphersuite", "0");
        map.put("Compress", "False");
        map.put("Eerpcertpassword", "vlenc:73367ce4-ea5e-498e-9463-f1c8294a0eea:9a5f74501b0a509b61e44f3a604a3448");
        map.put("Encryption", "False");
        map.put("Forceencryption", "False");
        map.put("Forcesignature", "False");
        map.put("Listenersendaction", "<send>");
        map.put("Notreadyreason", "Trading Partner User ID (SSIDCODE) required.");
        map.put("Overridedestination", "False");
        map.put("Overrideid", "False");
        map.put("Overridelistenercerts", "False");
        map.put("Overrideoriginator", "False");
        map.put("Requireauthentication", "False");
        map.put("Signed", "False");
        map.put("Signeerp", "False");
        map.put("Usepartnersamecerts", "False");
        mailboxmap.put(HostType.OFTP, map);
// SMTP: com.cleo.lexicom.beans.smtpbean.SmtpHost / com.cleo.lexicom.beans.smtpbean.SmtpMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Port", "25");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Storerawsent", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.SMTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Dsnentiremessage", "False");
        map.put("Dsnheadersonly", "False");
        map.put("Dsnondelay", "False");
        map.put("Dsnonsuccessorfailure", "False");
        map.put("Inmediatypes", "*");
        map.put("Outmediatypes", "*");
        map.put("Overrideservice", "False");
        mailboxmap.put(HostType.SMTP, map);
// SMTPS: com.cleo.lexicom.beans.smtpbean.secure.SmtpsHost / com.cleo.lexicom.beans.smtpbean.secure.SmtpsMailbox
        map = new TreeMap<String,String>();
        map.put(".securitymode", "None");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Port", "25");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Storerawsent", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.SMTPS, map);
        map = new TreeMap<String,String>();
        map.put(".clientcertalias", "");
        map.put(".clientcertpassword", "");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Dsnentiremessage", "False");
        map.put("Dsnheadersonly", "True");
        map.put("Dsnondelay", "False");
        map.put("Dsnonsuccessorfailure", "False");
        map.put("Inmediatypes", "*");
        map.put("Outmediatypes", "*");
        map.put("Overrideservice", "False");
        mailboxmap.put(HostType.SMTPS, map);
// SFTP: com.cleo.lexicom.beans.sshftpbean.SSHFTPHost / com.cleo.lexicom.beans.sshftpbean.SSHFTPMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.BufferRequests", "true");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.PreferredCipherAlgorithm", "");
        map.put("Advanced.PreferredCompressionAlgorithm", "zlib");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "22");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Uidswpd", "True");
        map.put("Verifyhostkey", "False");
        hostmap.put(HostType.SFTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".usepka", "False");
        map.put(".usercert", "");
        map.put(".usercertpassword", "");
        map.put("Notreadyreason", "Username required.");
        map.put("Partneroverridelistenercert", "True");
        map.put("Usepkafile", "False");
        mailboxmap.put(HostType.SFTP, map);
// MLLP: com.cleo.lexicom.beans.mllpbean.MLLPHost / com.cleo.lexicom.beans.mllpbean.MLLPMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Ackmode", "HL7 Original Acknowledgments");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Defaultname", "%date%_%time%.MLLP");
        map.put("Editable", "True");
        map.put("Hiddenpanels", "Mailbox=Security");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Mllpinboundenabled", "True");
        map.put("Mllpinboundport", "2575");
        map.put("Mllpinboundsecure", "False");
        map.put("Mllpoutboundenabled", "True");
        map.put("Mllpoutboundsecure", "False");
        map.put("Notreadyreason", "General tab:  Server Address is required when outbound sender is enabled.");
        map.put("Port", "2575");
        map.put("Requiremllpclientauthisselected", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.MLLP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Inboundaction", "<receive>");
        map.put("Inboundcreatequeue", "True");
        map.put("Inboundqueuename", "DIRECT=OS:.\\Private$\\ReceiveQueue");
        map.put("Inboundqueuetype", "MSMQ");
        map.put("Inboundrunatstartup", "True");
        map.put("Inboundusequeue", "False");
        map.put("Outboundaction", "<send>");
        map.put("Outboundcreatequeue", "True");
        map.put("Outboundqueuename", "DIRECT=OS:.\\Private$\\SendQueue");
        map.put("Outboundqueuetype", "MSMQ");
        map.put("Outboundrunatstartup", "True");
        map.put("Outboundsenderrestart", "5");
        map.put("Outboundusequeue", "False");
        mailboxmap.put(HostType.MLLP, map);
// WS: com.cleo.lexicom.beans.wsbean.WSHost / com.cleo.lexicom.beans.wsbean.WSMailbox
        map = new TreeMap<String,String>();
        map.put(".secure", "False");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Allowuntrusted", "False");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "0");
        map.put("Receivedbox", "receivedbox\\");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Sentbox", "sentbox\\");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[CONFIRM]", "");
        map.put("Syntax[CONNECT]", "");
        map.put("Syntax[DELETE]", "");
        map.put("Syntax[DIR]", "");
        map.put("Syntax[DISCONNECT]", "");
        map.put("Syntax[GET]", "");
        map.put("Syntax[PUT]", "");
        map.put("Syntaxversion", "1");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.WS, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Overridelistenercerts", "True");
        map.put("Requiretimestamp", "False");
        map.put("Sendtimestamp", "False");
        map.put("Usedefaultpolicy", "False");
        map.put("Usepartnersamecerts", "False");
        map.put("Usetradercerts", "False");
        mailboxmap.put(HostType.WS, map);
// RNIF: com.cleo.lexicom.beans.rosettabean.RNHost / com.cleo.lexicom.beans.rosettabean.RNMailbox
        map = new TreeMap<String,String>();
        map.put(".folder", "");
        map.put(".secure", "False");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Addpipdirtoinbox", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.IncomingContentFormat", "Original");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Incomingcontentformat", "Original");
        map.put("Incomingcontentformattwoactiononly", "False");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Overwriteduplicatefilenames", "False");
        map.put("Port", "0");
        map.put("Rosettaversion", "2");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST /?[pipCode=]&[pipVersion=]&[pipInstanceId=]&[actionType=|request|response|]");
        map.put("Uidswpd", "True");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.RNIF, map);
        map = new TreeMap<String,String>();
        map.put(".certalias", "");
        map.put(".certpassword", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Hasattachments", "False");
        map.put("Notreadyreason", "Trading Partner Business Identifier is a required field.");
        map.put("Overridelistenercerts", "False");
        map.put("Overridelistenerids", "False");
        map.put("Usepartnersamecerts", "True");
        mailboxmap.put(HostType.RNIF, map);
// EBICS: com.cleo.lexicom.beans.ebicsbean.EBICSHost / com.cleo.lexicom.beans.ebicsbean.EBICSMailbox
        map = new TreeMap<String,String>();
        map.put(".secure", "True");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.EBICSVersion", "EBICS 2.4");
        map.put("Advanced.ESVersion", "A005");
        map.put("Advanced.EncryptionAlgorithm", "AES-256");
        map.put("Advanced.HighPriority", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.ServerType", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Defaultfilename", "%ebics.ordertype%.xml");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "443");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Securitymediumid", "00");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[GET]", "POST \nContent-Type=|text/xml|application/xml|");
        map.put("Syntax[PUT]", "POST \nContent-Type=|text/xml|application/xml|");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.EBICS, map);
        map = new TreeMap<String,String>();
        map.put(".certalias", "");
        map.put(".certpassword", "");
        map.put(".escertalias", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Header[GET]", "Content-Type=text/xml");
        map.put("Header[PUT]", "Content-Type=text/xml");
        map.put("Notreadyreason", "EBICS tab:  My Partner ID is required.  Must be a string up to 35 characters ([a-zA-Z0-9,=]).");
        map.put("Overridelistenercerts", "False");
        map.put("Signatureclass", "Transport signature (type 'T')");
        map.put("Usepartnersamecerts", "False");
        mailboxmap.put(HostType.EBICS, map);
// FASP: com.cleo.lexicom.beans.faspbean.FaspHost / com.cleo.lexicom.beans.faspbean.FaspMailbox
        map = new TreeMap<String,String>();
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.Encryption", "None");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.Overwrite", "Always");
        map.put("Advanced.Policy", "Adaptive");
        map.put("Advanced.ResumeCheck", "Off");
        map.put("Advanced.TransportEncryption", "NONE");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "-1");
        map.put("Proxyfirewall", "<None>");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Udpport", "-1");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.FASP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".usepka", "False");
        map.put("Notreadyreason", "Username required.");
        map.put("Packagingdecrypt", "False");
        map.put("Packagingencrypt", "False");
        map.put("Usepkafile", "False");
        mailboxmap.put(HostType.FASP, map);
// HSP: com.cleo.lexicom.beans.hspbean.HspHost / com.cleo.lexicom.beans.hspbean.HspMailbox
        map = new TreeMap<String,String>();
        map.put(".secure", "True");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriority", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.SSLMaximumProtocolVersion", "");
        map.put("Advanced.SSLMinimumProtocolVersion", "SSL 3.0");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Notreadyreason", "Server Address is required.");
        map.put("Outbox", "outbox/");
        map.put("Port", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST /hsp\nchannels=|1|2|8|16|32|");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.HSP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Notreadyreason", "Trading Parter Signing Certificate is required.");
        map.put("Overridelistenercerts", "False");
        map.put("Usepartnersamecerts", "True");
        mailboxmap.put(HostType.HSP, map);
// LOCAL_USER: com.cleo.lexicom.beans.OmniLocalUserHost / com.cleo.lexicom.beans.OmniLocalUserMailbox
        map = new TreeMap<String,String>();
        map.put(".allowedprotocols", "FTP,HTTP,SSHFTP");
        map.put(".homedirenabled", "True");
        map.put(".omni", "True");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.AllowActionsToRunConcurrently", "true");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Defaulthomedir", "local\\root\\%username%");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "False");
        map.put("Folderpermission", "root=download,upload,overwrite,delete");
        map.put("Inbox", "outbox\\");
        map.put("Incomingfilepatterns", "*");
        map.put("Incomingmediatypes", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "False");
        map.put("Notes", "This contains the local HTTP, FTP, and SSH FTP server user accounts.  These work in conjunction with the settings in the Local Listener HTTP, FTP and SSH FTP tabs.");
        map.put("Outbox", "inbox\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Port", "0");
        map.put("Readonlyusers", "False");
        map.put("Roles", "content");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        map.put("Twofactorauthentication", "False");
        map.put("Uidswpd", "True");
        map.put("Usersmayinvite", "False");
        map.put("Usersmayshare", "False");
        map.put("Viewpartnermailboxes", "False");
        map.put("Viewtransfers", "True");
        hostmap.put(HostType.LOCAL_USER, map);
        map = new TreeMap<String,String>();
        map.put(".associateprimarymailbox", "False");
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Allowpassorsshkey", "False");
        map.put("Homedirectorytype", "DEFAULT_HOME");
        map.put("Ldaphomedir", "False");
        map.put("Notreadyreason", "Password required.");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Pipeincomingpayload", "False");
        map.put("Requirepassandsshkey", "False");
        map.put("Requirepasswordchangenextlogin", "False");
        map.put("Usedefroot", "True");
        map.put("Userlockedoutuntil", "0");
        mailboxmap.put(HostType.LOCAL_USER, map);
// LOCAL_FTP: com.cleo.lexicom.beans.FtpUserHost / com.cleo.lexicom.beans.FtpUserMailbox
        map = new TreeMap<String,String>();
        map.put(".homedirenabled", "True");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "False");
        map.put("Ftprootpath", "local/root");
        map.put("Inbox", "inbox\\");
        map.put("Incomingfilepatterns", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "True");
        map.put("Notes", "This contains the local FTP server user accounts.  These work in conjunction with the settings in the Local Listener FTP tab.");
        map.put("Outbox", "outbox\\payload\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Port", "0");
        map.put("Readonlyusers", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.LOCAL_FTP, map);
        map = new TreeMap<String,String>();
        map.put(".as3user", "False");
        map.put(".folder", "");
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencrpending", "False");
        map.put(".localencrreadonly", "False");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerreadonly", "False");
        map.put(".servercertfile", "");
        map.put(".serversigncertfile", "");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.UseAS3ContentTypeForFileExtension", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Advanced.action.NoSubDirectories", "");
        map.put("Asyncdeliverymethod", "4");
        map.put("Compressedrequest", "False");
        map.put("Contenttype", "-1");
        map.put("Deliverytype", "1");
        map.put("Emailmdn", "False");
        map.put("Encryptedrequest", "False");
        map.put("Encryptionmethod", "4");
        map.put("Forceencryption", "False");
        map.put("Forcemdnsignature", "False");
        map.put("Forcesignature", "False");
        map.put("Homedirectory", "myTradingPartner");
        map.put("Keyencryptionalgorithm", "0");
        map.put("Ldaphomedir", "False");
        map.put("Localreadonly", "False");
        map.put("Localsignpending", "False");
        map.put("Messageversion", "1.1");
        map.put("Mictype", "0");
        map.put("Notreadyreason", "Password required.");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Overridelistenercerts", "False");
        map.put("Pipeincomingpayload", "False");
        map.put("Receiptdesired", "False");
        map.put("Requirepasswordchangenextlogin", "False");
        map.put("Signaturealgorithm", "0");
        map.put("Signedreceipt", "False");
        map.put("Signedrequest", "False");
        map.put("Usedefroot", "True");
        map.put("Useencrcert", "False");
        map.put("Userlockedoutuntil", "0");
        map.put("Usertype", "0");
        map.put("Usesamecerts", "False");
        map.put("Usesigncert", "False");
        mailboxmap.put(HostType.LOCAL_FTP, map);
// LOCAL_HTTP: com.cleo.lexicom.beans.httpserver.HttpUserHost / com.cleo.lexicom.beans.httpserver.HttpUserMailbox
        map = new TreeMap<String,String>();
        map.put(".homedirenabled", "True");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Associatedwebportal", "Default Portal");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "False");
        map.put("Ftprootpath", "local/root");
        map.put("Inbox", "inbox\\");
        map.put("Incomingfilepatterns", "*");
        map.put("Incomingmediatypes", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "True");
        map.put("Outbox", "outbox\\payload\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Overwritefiles", "False");
        map.put("Poolsize", "2");
        map.put("Port", "0");
        map.put("Portalapplets", "False");
        map.put("Portaluserspasswordchange", "All");
        map.put("Readonlyusers", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        map.put("Uidswpd", "True");
        map.put("Usedefaultfilename", "False");
        map.put("Usemetadata", "False");
        map.put("Viewpartnermailboxes", "False");
        map.put("Zipuploadallowed", "False");
        hostmap.put(HostType.LOCAL_HTTP, map);
        map = new TreeMap<String,String>();
        map.put(".associateprimarymailbox", "False");
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".sslclientauth", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Advanced.action.NoSubDirectories", "");
        map.put("Homedirectory", "myTradingPartner");
        map.put("Ldaphomedir", "False");
        map.put("Notreadyreason", "Password required.");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Pipeincomingpayload", "False");
        map.put("Requirepasswordchangenextlogin", "False");
        map.put("Usedefroot", "True");
        map.put("Userlockedoutuntil", "0");
        map.put("Zipportaluploads", "False");
        mailboxmap.put(HostType.LOCAL_HTTP, map);
// LOCAL_SFTP: com.cleo.lexicom.beans.SshFtpUserHost / com.cleo.lexicom.beans.SshFtpUserMailbox
        map = new TreeMap<String,String>();
        map.put(".homedirenabled", "True");
        map.put(".standaloneaction", "False");
        map.put(".test", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "False");
        map.put("Ftprootpath", "local/root");
        map.put("Inbox", "inbox\\");
        map.put("Incomingfilepatterns", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "True");
        map.put("Outbox", "outbox\\payload\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Port", "0");
        map.put("Readonlyusers", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        map.put("Uidswpd", "True");
        hostmap.put(HostType.LOCAL_SFTP, map);
        map = new TreeMap<String,String>();
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".localpackaging", "None");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".usepka", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Advanced.action.NoSubDirectories", "");
        map.put("Homedirectory", "myTradingPartner");
        map.put("Ldaphomedir", "False");
        map.put("Notreadyreason", "Password required.");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Pipeincomingpayload", "False");
        map.put("Requirepasswordchangenextlogin", "False");
        map.put("Usedefroot", "True");
        map.put("Usepkafile", "False");
        map.put("Userlockedoutuntil", "0");
        mailboxmap.put(HostType.LOCAL_SFTP, map);
        // *** to here is generated from the Shell using dump *:audit or printAllDefaults()
    }

    private static String q(String s) {
        return s.replaceAll("\\\\","\\\\\\\\")
                .replaceAll("\n", "\\\\n")
                .replaceAll("\"", "\\\\\"");
    }
    private static final String ALIAS = UUID.randomUUID().toString();
    public static Object printDefaults(PrintStream out, HostType type) {
        Map<String,String> hostprops;
        Map<String,String> mailboxprops;
        try {
            Host host = LexiCom.activateHost(type, ALIAS);
            host.save();
            Mailbox[] mailboxes = host.getMailboxes();
            Mailbox   mailbox;
            if (mailboxes.length==0) {
                mailbox = host.createMailbox("alias");
            } else {
                mailbox = mailboxes[0];
            }
            hostprops = host.getProperties();
            mailboxprops = mailbox.getProperties();

            String hostclass = LexiCom.decode(hostprops.get(".class"));
            String mailboxclass = LexiCom.decode(mailboxprops.get(".class"));
            out.println("// " + type.name() + ": "+ hostclass + " / "+ mailboxclass);
            Class<?> beanclass = Class.forName(hostclass);
            Object bean = beanclass.newInstance();
            /*
            //Properties defaults = bean.defaultProperties;
            PropertyDescriptor[] props = Introspector.getBeanInfo(beanclass).getPropertyDescriptors();
            for (PropertyDescriptor prop : props) {
                out.println(prop.getName()+": "+prop.getPropertyType().getName()+" = "+hostprops.get(prop.getName().toLowerCase()));
            }
            for (Map.Entry<String, String> e : hostprops.entrySet()) {
                if (!ignore.contains(e.getKey().toLowerCase())) {
                    out.printf("        map.put(\"%s\", \"%s\");\n", e.getKey(), q(e.getValue()));
                }
            }
            */

            /* */
            // the dangerous part is done -- now just print the results
            out.println("        map = new TreeMap<String,String>();");
            for (Map.Entry<String, String> e : hostprops.entrySet()) {
                if (!ignore.contains(e.getKey().toLowerCase())) {
                    out.printf("        map.put(\"%s\", \"%s\");\n", e.getKey(), q(e.getValue()));
                }
            }
            out.printf("        hostmap.put(HostType.%s, map);\n", type.name());
            out.println("        map = new TreeMap<String,String>();");
            for (Map.Entry<String, String> e : mailboxprops.entrySet()) {
                if (!ignore.contains(e.getKey().toLowerCase())) {
                    out.printf("        map.put(\"%s\", \"%s\");\n", e.getKey(), q(e.getValue()));
                }
            }
            out.printf("        mailboxmap.put(HostType.%s, map);\n", type.name());
            /* */

            LexiCom.remove(host.getPath());
            return bean;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    public static void printAllDefaults(PrintStream out) {
        for (HostType t : HostType.values()) {
            printDefaults(out, t);
        }
    }

    public static Map<String,String> getHostDefaults(HostType type) {
        return hostmap.get(type);
    }

    public static Map<String,String> getDefaults(Item item) throws Exception {
        if (!(item instanceof Host || item instanceof Mailbox)) {
            return null;
        }
        Map<String,String> result = new HashMap<String,String>();
        Class<?> beanclass = Class.forName(LexiCom.decode(item.getProperties().get(".class")));
        // Object bean = beanclass.newInstance();
        //Properties defaults = bean.defaultProperties;
        PropertyDescriptor[] props = Introspector.getBeanInfo(beanclass).getPropertyDescriptors();
        for (PropertyDescriptor prop : props) {
            result.put(prop.getName(), prop.getPropertyType().getName());
        }
        //for (Map.Entry<Object,Object> e : defaults.entrySet()) {
            //result.put(e.getKey().toString(), e.getValue().toString());
        //}
        return result;
    }
    public static Map<String,String> suppressHostDefaults(HostType type, Map<String,String> props) {
        if (props!=null) {
            Map<String,String> defaults = getHostDefaults(type);
            if (defaults == null) {
                defaults = Collections.emptyMap();
            }
            Iterator<Map.Entry<String,String>> i = props.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry<String,String> e = i.next();
                if (ignore.contains(e.getKey().toLowerCase()) ||
                    e.getValue().equalsIgnoreCase(defaults.get(e.getKey())) ||
                    e.getValue().equalsIgnoreCase(manualhostdefaults.get(e.getKey()))) {
                    i.remove();
                }
            }
        }
        return props;
    }

    public static Map<String,String> getMailboxDefaults(HostType type) {
        return mailboxmap.get(type);
    }

    public static Map<String,String> suppressMailboxDefaults(HostType type, Map<String,String> props) {
        if (props!=null) {
            Map<String,String> defaults = getMailboxDefaults(type);
            Iterator<Map.Entry<String,String>> i = props.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry<String,String> e = i.next();
                if (ignore.contains(e.getKey().toLowerCase()) ||
                    e.getValue().equalsIgnoreCase(defaults.get(e.getKey())) ||
                    e.getValue().equalsIgnoreCase(manualmailboxdefaults.get(e.getKey()))) {
                    i.remove();
                }
            }
        }
        return props;
    }
}
